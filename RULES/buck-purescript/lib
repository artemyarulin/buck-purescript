def target(name):
    return '//RULES/buck-purescript:' + name

npm_template = """{"dependencies": {"purescript": "$psVersion"}}"""

def ensure_list(i):
    return i if isinstance(i,list) else [i]

def ps_define_module(name,src=None,modules=[],deps=[],tests=[],psVersion="0.9.1"):
    src,modules,deps,tests = map(ensure_list,[src,modules,deps,tests])
    genrule(name = name,
            srcs = src,
            bash = 'mkdir -p $OUT/{src,deps,test} && ' +
            'for f in $SRCS; do echo $f >> /tmp/out && path=`grep -Eo "^module\s+[a-zA-Z\.]+" $f | sed -Ee "s/.*[[:space:]]// ; s/\.?[a-zA-Z]+$//; s/\./\//g"` && mkdir -p $OUT/src/$path && cp $f $OUT/src/$path; done &&' +
            ('&&'.join(map(lambda d: 'rsync -ra --prune-empty-dirs $(location ' + d + ')/src/ $OUT/src',modules)) if len(modules) else 'true') + '&&' +
            ('&&'.join(map(lambda d: 'rsync -ra --prune-empty-dirs $(location ' + d + ')/deps/ $OUT/deps',modules)) if len(modules) else 'true') + '&&' +
            ('&&'.join(map(lambda d: 'rsync -ra --prune-empty-dirs $(location ' + d + ')/ $OUT/deps',deps)) if len(deps) else 'true') + '&&' +
            'psVersion="' + psVersion + '"&&' +
            'cat > $OUT/package.json <<EOL\n' + npm_template + '\nEOL\n\n ',
            out = 'build',
            visibility = ['PUBLIC'])

    genrule(name = name + '_build',
            srcs = [],
            bash = 'cp -r $(location :{0}) . && cd build && psc "src/**/*.purs" "deps/**/*.purs" --no-prefix --output $OUT'.format(name),
            out = 'build')

    if tests:
        genrule(name = name + '_build_test',
                srcs = tests,
                bash = 'mkdir -p $OUT/test &&' +
                'for f in $SRCS; do path=`grep -Eo "^module\s+[a-zA-Z\.]+" $f | sed -e "s/.*[[:space:]]// ; s/\.?[a-zA-Z]+$//; s/\./\//g"` && mkdir -p $OUT/test/$path && cp $f $OUT/test/$path; done &&' +
                'rsync -ra $(location :{0})/ $OUT/ && cd $OUT && psc "src/**/*.purs" "deps/**/*.purs" "test/**/*.purs" --no-prefix'.format(name),
                out = 'build_test')

        sh_test(name = name + '_test',
                test = target('ps_test.sh'),
                args = ['$(location :{0})'.format(name + '_build_test')],
                deps = [':' + name + '_build_test'])

test_def_deps = []

def ps_module(name,src=[],modules=[],deps=[],tests=[]):
    ps_define_module(name,
                     src if src else name + '.purs',
                     modules,
                     ensure_list(deps) + test_def_deps if tests else deps,
                     tests)

def ps_test(name,src=None,modules=[],deps=[],test_deps = test_def_deps):
    ps_define_module('test_' + name,
                     [],
                     modules,
                     ensure_list(deps) + test_deps,
                     src if src else name + '.purs')
